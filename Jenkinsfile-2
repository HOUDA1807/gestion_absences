pipeline {
    agent any

    environment {
        // Définir les variables d'environnement nécessaires pour Ansible
        ANSIBLE_CONFIG = './ansible/ansible.cfg'  // Si tu as un fichier de configuration spécifique à Ansible
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Récupère le code depuis le dépôt GitHub
                    echo 'Cloning the repository from GitHub...'
                    git credentialsId: 'jenkins-github-sec-key', url: 'https://github.com/HOUDA1807/gestion_absences.git'
                }
            }
        }

        stage('Set Up Environment') {
            steps {
                script {
                    // Vérifie si Ansible est installé sur l'agent Jenkins
                    echo 'Verifying Ansible installation...'
                    sh 'ansible --version'  // Vérifie si Ansible est installé
                    sh 'ansible-playbook --version'  // Vérifie la version du playbook
                    sh 'ansible-galaxy --version'  // Vérifie la version d'Ansible Galaxy si nécessaire
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    // Vérifie que le fichier playbook.yml existe dans le répertoire ansible/
                    echo 'Verifying the playbook.yml file existence...'
                    sh 'ls -la ansible/'
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    // Exécute le playbook Ansible avec l'inventaire
                    echo 'Running Ansible Playbook...'
                    try {
                        sh 'ansible-playbook -i ansible/inventory.ini ansible/playbook.yml'
                    } catch (Exception e) {
                        // En cas d'erreur lors de l'exécution, cela arrête le pipeline et le signale
                        error "Ansible playbook execution failed: ${e.message}"
                    }
                }
            }
        }

        stage('Post-execution') {
            steps {
                script {
                    // Cette étape peut inclure un rapport ou des actions post-exécution
                    echo 'Playbook executed successfully.'
                }
            }
        }
    }

    post {
        success {
            // Action après un succès, comme une notification ou un autre traitement
            echo 'Pipeline completed successfully!'
        }
        failure {
            // Action après un échec, comme une notification ou un autre traitement
            echo 'Pipeline failed. Please check the logs for errors.'
        }
        always {
            // Action qui se fait toujours, comme nettoyer ou archiver les résultats
            echo 'Cleaning up or archiving logs...'
        }
    }
}
